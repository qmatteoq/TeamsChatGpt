@page "/chat"
@using AzureOpenAI.Helpers.Models;
@using Microsoft.SemanticKernel;
@using Microsoft.SemanticKernel.Orchestration;
@using Microsoft.SemanticKernel.SemanticFunctions;
@inject IConfiguration configuration;

<h3>ChatGPT</h3>

@foreach (var chatMessage in messages)
{
    <div><strong>Role:</strong> @chatMessage.role</div>
    <div><strong>Message:</strong> @chatMessage.content</div>
    <hr />
}

@if (isLoading)
{
    <p>
        <strong>Waiting for a response...</strong>
    </p>
}

<p>
    <div>Type your message:</div>
    <div><textarea rows="5" cols="100" @bind="@message" /></div>

    <button @onclick="() => SendMessageAsync()">
        Send
    </button>
</p>


@code {
    private string message;
    private List<Message> messages = new List<Message>();
    private bool isLoading;
    private IKernel kernel;
    private string history;
    private ISKFunction chatFunction;
    private ContextVariables context;

    protected override async Task OnInitializedAsync()
    {
        string apiKey = configuration["AzureOpenAI:ApiKey"];
        string deploymentName = configuration["AzureOpenAI:DeploymentName"];
        string endpoint = configuration["AzureOpenAI:Endpoint"];

        kernel = Kernel.Builder.Build();
        kernel.Config.AddAzureChatCompletionService("chatgpt-azure", deploymentName, endpoint, apiKey, true);

        history = string.Empty;

        var prompt = @"You are an AI assistant that helps users answering their questions. Answer in a concise way. If you don't know the answer, don't try to guess, just say you don't know it.
                      {{$history}}

                      User: {{$input}}
                      ChatBot: ";

        var promptConfig = new PromptTemplateConfig
        {
            Completion =
            {
                MaxTokens = 2000,
                Temperature = 0.7,
                TopP = 0.5,
            }
        };

        var promptTemplate = new PromptTemplate(prompt, promptConfig, kernel);
        var functionConfig = new SemanticFunctionConfig(promptConfig, promptTemplate);
        chatFunction = kernel.RegisterSemanticFunction("ChatBot", "Chat", functionConfig);

        context = new ContextVariables();
    }

    public async Task SendMessageAsync()
    {
        messages.Add(new Message { content = message });
        var response = await Chat(message);
        messages.Add(new Message { content = response });
    }

    private async Task<string> Chat(string input)
    {
        context.Set("input", input);

        // Process the user message and get an answer
        var answer = await kernel.RunAsync(context, chatFunction);

        // Append the new interaction to the chat history
        history += $"\nHuman: {input}\nChatBot: {answer}\n";
        context.Set("history", history);
        return answer.Result;
    }
}
