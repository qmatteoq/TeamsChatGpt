@page "/chat"
@using AzureOpenAI.Helpers.Models;
@using Microsoft.SemanticKernel;
@using Microsoft.SemanticKernel.AI.ChatCompletion;
@using Microsoft.SemanticKernel.Connectors.AI.OpenAI.ChatCompletion;
@using Microsoft.SemanticKernel.Orchestration;
@using Microsoft.SemanticKernel.SemanticFunctions;
@inject IConfiguration configuration;

<h3>ChatGPT</h3>

@foreach (var chatMessage in messages)
{
    <div><strong>Role:</strong> @chatMessage.role</div>
    <div><strong>Message:</strong> @chatMessage.content</div>
    <hr />
}

@if (isLoading)
{
    <p>
        <strong>Waiting for a response...</strong>
    </p>
}

<p>
    <div>Type your message:</div>
    <div><textarea rows="5" cols="100" @bind="@message" /></div>

    <button @onclick="() => SendMessageAsync()">
        Send
    </button>
</p>


@code {
    private string message;
    private List<Message> messages = new List<Message>();
    private bool isLoading;
    private OpenAIChatHistory chat;
    private IChatCompletion chatGpt;

    protected override async Task OnInitializedAsync()
    {
        string apiKey = configuration["AzureOpenAI:ApiKey"];
        string deploymentName = configuration["AzureOpenAI:DeploymentName"];
        string endpoint = configuration["AzureOpenAI:Endpoint"];

        var kernel = Kernel.Builder.Build();
        kernel.Config.AddAzureChatCompletionService("chatgpt-azure", deploymentName, endpoint, apiKey, true);
        chatGpt = kernel.GetService<IChatCompletion>();

        var systemMessage = @"You are an AI assistant that helps users answering their questions. Answer in a concise way. If you don't know the answer, don't try to guess, just say you don't know it.";

        chat = (OpenAIChatHistory)chatGpt.CreateNewChat(systemMessage);
    }

    public async Task SendMessageAsync()
    {
        messages.Add(new Message { role = "user", content = message });
        chat.AddUserMessage(message);
        isLoading = true;
        var reply = await chatGpt.GenerateMessageAsync(chat, new ChatRequestSettings());
        isLoading = false;
        chat.AddAssistantMessage(reply);
        messages.Add(new Message { role = "assistant", content = reply });
    }
}
