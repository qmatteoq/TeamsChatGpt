@page "/businessMail"

@using Microsoft.SemanticKernel;
@using Microsoft.SemanticKernel.AI.ChatCompletion;
@using Microsoft.SemanticKernel.Connectors.AI.OpenAI.ChatCompletion;
@using Microsoft.SemanticKernel.KernelExtensions;
@using Microsoft.SemanticKernel.Orchestration;
@using Microsoft.SemanticKernel.SemanticFunctions;
@inject IConfiguration configuration;

<h3>Business Mail</h3>

<div>Type your message:</div>
<div><textarea rows="5" cols="100" @bind="@inputText" /></div>

<button @onclick="() => GenerateBusinessMailAsync()">
    Send
</button>

<p class="markup">@((MarkupString)outputText)</p>

@code {

    private string inputText;
    private string outputText;

    public async Task GenerateBusinessMailAsync()
    {
        string apiKey = configuration["AzureOpenAI:ApiKey"];
        string deploymentName = configuration["AzureOpenAI:DeploymentName"];
        string endpoint = configuration["AzureOpenAI:Endpoint"];

        var kernel = Kernel.Builder.Build();
        kernel.Config.AddAzureChatCompletionService("chatgpt-azure", deploymentName, endpoint, apiKey, true);

        var skill = kernel.ImportSemanticSkillFromDirectory("Skills", "GeneratorSkill");
        var context = new ContextVariables();
        context.Set("text", inputText);

        var result = await kernel.RunAsync(context, skill["MailGeneratorFunction"]);

        if (!result.ErrorOccurred)
        {
            outputText = result.Result;
        }
        else
        {
            outputText = result.LastErrorDescription;
        }
    }
}