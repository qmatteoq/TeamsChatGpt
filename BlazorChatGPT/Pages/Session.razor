@page "/session"

@using BlazorChatGPT.Services;
@inject IOpenAiService openAiService;

<h3>Session</h3>

<div>API service:</div>
<InputSelect @bind-Value="apiService">
    <option value="">Select your AI service</option>
    <option value="openai">OpenAI</option>
    <option value="azureopenai">Azure OpenAI</option>
</InputSelect>

<div>Execution:</div>
<InputSelect @bind-Value="execution">
    <option value="">Select your execution plan</option>
    <option value="inline">Inline</option>
    <option value="skill">Skill</option>
    <option value="chain">Chain</option>
</InputSelect>

<div>Describe the topic of your session:</div>
<div><textarea rows="5" cols="100" @bind="@topic" /></div>

<InputSelect name="style" id="cars"@bind-Value="tone">
    <option value="professional">Professional</option>
    <option value="fun">Fun</option>
</InputSelect>

<button @onclick="() => GenerateBusinessMailAsync()">
    Send
</button>

@if (isLoading)
{
    <p>
        <strong>Waiting for a response...</strong>
    </p>
}

<p class="markup">@((MarkupString)output)</p>

@code {

    private string topic;
    private string output;
    private string tone;
    private string apiService;
    private bool isLoading;
    private string execution;

    public async Task GenerateBusinessMailAsync()
    {
        if (apiService == "openai")
        {
            openAiService.UseOpenAI();
        }
        else
        {
            openAiService.UseAzureOpenAI();
        }

        output = string.Empty;
        isLoading = true;

        switch(execution)
        {
            case "inline":
                output = await openAiService.GenerateSessionInlineAsync(topic, tone);
                break;
            case "skill":
                output = await openAiService.GenerateSessionAsync(topic, tone);
                break;
            case "chain":
                output = await openAiService.GenerateTranslatedSessionAsync(topic, tone);
                break;
        }

        isLoading = false;
    }
}